question1)
#include <stdio.h>

int hamming_distance(unsigned int n1, unsigned int n2) {
    int count=n1^n2;
    int i=0;
    int rem=0;
    int flag=0;
    while(count>0)
    {
      rem=count%2;
      count=count/2;
      if(rem)
      {
        flag++;
      }
      i++;
    }
    return flag;
}
int main() {
    printf("hamming_distance(7, 9) = %d\n", hamming_distance(7, 9));
    printf("hamming_distance(2, 1) = %d\n", hamming_distance(2, 1));
    printf("hamming_distance(2, 0) = %d\n", hamming_distance(2, 0));
    printf("hamming_distance(15, 0) = %d\n", hamming_distance(15, 0));
}

output:

prajwal@DESKTOP-8U4IRQ2:~/assesment/assesment_1$ ./assess_1
hamming_distance(7, 9) = 3
hamming_distance(2, 1) = 2
hamming_distance(2, 0) = 1
hamming_distance(15, 0) = 4

question 2)
#include <stdio.h>
#include<string.h>

char to_upper(char c) {
    if (c >= 'a' && c <= 'z') {
        return c + ('A' - 'a');
    }
    return c;
}
void change_first_letters_to_upper(char *s) {
  int len=strlen(s);
  for(int i=0;i<=len;i++)
  {
    if(s[i]==' ')
    {
      s[i+1]=to_upper(s[i+1]);
    }
    else if(i==0)
    {
      s[i]=to_upper(s[i]);
    }
  }
}
int main(){
    char s[] = "hello world";
    printf("change_first_letters_to_upper of %s: \n" , s);
    change_first_letters_to_upper(s);
    printf("%s \n", s);
    char t[] = "Bye bye world, see you";
    printf("change_first_letters_to_upper of %s: \n", t);
    change_first_letters_to_upper(t);
    printf("%s \n", t);
    return 0;
}

output:
prajwal@DESKTOP-8U4IRQ2:~/assesment/assesment_1$ ./assess_2
change_first_letters_to_upper of hello world:
Hello World
change_first_letters_to_upper of Bye bye world, see you:
Bye Bye World, See You

question 3)

#include <stdio.h>

float evaluate_quad(float coefficients[], float x) {
    return (coefficients[2]*(x*x))+(coefficients[1]*x)+coefficients[0];
}

int main() {
    float coefficients[] = {2.0, -1.0, -3.2};
    float result = evaluate_quad(coefficients, 3.5);
    printf("Result: %f\n", result);
    float coefficients_2[] = {1.0, 0, 0};
    result = evaluate_quad(coefficients_2, 4.0);
    printf("Result: %f\n", result);
}

output:
prajwal@DESKTOP-8U4IRQ2:~/assesment/assesment_1$ ./assess_3
Result: -40.700001
Result: 1.000000


question 4)
#include <stdio.h>

void make_change(int number) {
    int rem=0;
    rem=number%50;
    int countof50p=0;
    int countof10p=0;
    if(rem<50)
    {
      if(rem>21)
      {
        countof50p++;
      }
      printf("%d 50 paisa coins\n",countof50p);
      rem=rem%10;
      if(rem<10)
        {
          countof10p=countof10p+2;
          printf("%d 10 paisa coins\n",countof10p);
          printf("%d 1 paisa coins\n",rem);
        }
      }
}


int main() {
    //make_change(77);
    make_change(21);
}

prajwal@DESKTOP-8U4IRQ2:~/assesment/assesment_1$ ./assess_4
0 50 paisa coins
2 10 paisa coins
1 1 paisa coins

question 5)
#include <stdio.h>

float eval_poly(int degree, float coefficients[], float point) {
    
    return (coefficients[3]*(point*point*point))+(coefficients[2]*(point*point))+(coefficients[1]*point)+coefficients[0];
}

int main() {
    float coefficients[] = {2.0, 1.0, -1.5, 0.75}; // Polynomial: 0.75*x^3 - 1.5*x^2 + 1.0*x + 2.0
    int degree = 3;
    float result = eval_poly(degree, coefficients, 2.0);
    printf("Result: %f\n", result);
    float coefficients1[] = {2.0, 1.0, -1.5, 0.75, -6.3}; // Polynomial: -6.3*x^4 + 0.75*x^3 - 1.5*x^2 + 1.0*x + 2.0
    int degree1 = 4;
    float result1 = eval_poly(degree1, coefficients1, 0.5);
    printf("Result: %f\n", result1);
}
    
output:

prajwal@DESKTOP-8U4IRQ2:~/assesment/assesment_1$ ./assess_5
Result: 4.000000
Result: 2.218750


